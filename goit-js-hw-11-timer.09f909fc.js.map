{"version":3,"sources":["index.js"],"names":["CountdownTimer","selector","targetDate","start","targetTime","getTime","setInterval","currentTime","Date","now","time","timeLeft","getTimeComponents","updateCountdownTimer","days","hours","mins","secs","timerById","document","querySelector","daysTimer","hoursTimer","minsTimer","secsTimer","textContent","pad","Math","floor","value","String","padStart","countdownTimer"],"mappings":";AAwDA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAxDMA,IAAAA,EAAAA,WACoC,SAAA,EAAA,GAAxBC,IAAAA,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,WAAc,EAAA,KAAA,GAC7BD,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EACbC,KAAAA,QAoDb,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,QAjDY,MAAA,WAAA,IAAA,EAAA,KACEC,EAAa,KAAKF,WAAWG,UAEnCC,YAAY,WACFC,IAAAA,EAAcC,KAAKC,MACnBC,EAAON,EAAaG,EACpBI,EAAW,EAAKC,kBAAkBF,GACxC,EAAKG,qBAAqBF,IAE3B,OAwCX,CAAA,IAAA,uBArCsD,MAAA,SAAA,GAA3BG,IAAAA,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KAChCC,EAAYC,SAASC,cAAc,KAAKnB,UACxCoB,EAAYH,EAAUE,cAAc,2BACpCE,EAAaJ,EAAUE,cAAc,4BACrCG,EAAYL,EAAUE,cAAc,2BACpCI,EAAYN,EAAUE,cAAc,2BAE1CC,EAAUI,YAAiBX,GAAAA,OAAAA,GAC3BQ,EAAWG,YAAiBV,GAAAA,OAAAA,GAC5BQ,EAAUE,YAAiBT,GAAAA,OAAAA,GAC3BQ,EAAUC,YAAiBR,GAAAA,OAAAA,KA2BnC,CAAA,IAAA,oBAlBsBP,MAAAA,SAAAA,GAMX,MAAA,CAAEI,KALI,KAAKY,IAAIC,KAAKC,MAAMlB,EAAQ,QAK1BK,MAJD,KAAKW,IAAIC,KAAKC,MAAOlB,EAAQ,MAAyB,OAI9CM,KAHT,KAAKU,IAAIC,KAAKC,MAAOlB,EAAQ,KAAoB,MAGlCO,KAFf,KAAKS,IAAIC,KAAKC,MAAOlB,EAAQ,IAAc,SAc5D,CAAA,IAAA,MALQmB,MAAAA,SAAAA,GACGC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,SAIrC,EAxDM/B,GAwDAgC,EAAiB,IAAIhC,EAAe,CACtCC,SAAU,WACVC,WAAY,IAAIM,KAAK","file":"goit-js-hw-11-timer.09f909fc.js","sourceRoot":"..","sourcesContent":["class CountdownTimer {\n    constructor({ selector, targetDate }) {\n        this.selector = selector;\n        this.targetDate = targetDate;\n        this.start();\n    }\n\n    start() {\n        const targetTime = this.targetDate.getTime();\n\n        setInterval(() => {\n            const currentTime = Date.now();\n            const time = targetTime - currentTime;\n            const timeLeft = this.getTimeComponents(time);\n            this.updateCountdownTimer(timeLeft);\n\n        }, 1000);\n    }\n\n    updateCountdownTimer({ days, hours, mins, secs }) {\n        const timerById = document.querySelector(this.selector);\n        const daysTimer = timerById.querySelector('span[data-value=\"days\"]');\n        const hoursTimer = timerById.querySelector('span[data-value=\"hours\"]');\n        const minsTimer = timerById.querySelector('span[data-value=\"mins\"]');\n        const secsTimer = timerById.querySelector('span[data-value=\"secs\"]');\n\n        daysTimer.textContent = `${days}`;\n        hoursTimer.textContent = `${hours}`;\n        minsTimer.textContent = `${mins}`;\n        secsTimer.textContent = `${secs}`;\n    }\n\n    /*\n   * - Принимает время в миллисекундах\n   * - Высчитывает сколько в них вмещается дней/часов/минут/секунд\n   * - Возвращает обьект со свойствами days, hours, mins, secs\n   */\n\n    getTimeComponents(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { days, hours, mins, secs };\n    }\n\n    /*\n   * Принимает число, приводит к строке и добавляет в начало 0 если число меньше 2-х знаков\n   */\n\n    pad(value) {\n    return String(value).padStart(2, '0');\n}\n}\n\nconst countdownTimer = new CountdownTimer({\n    selector: '#timer-1',\n    targetDate: new Date('January 01, 2021'),\n});\n"]}